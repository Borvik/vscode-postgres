<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>pgsql</string>
		<string>psql</string>
	</array>
	<key>foldingStartMarker</key>
	<string>\s*\(\s*$</string>
	<key>foldingStopMarker</key>
	<string>^\s*\)</string>
	<key>name</key>
	<string>SQL (PostgreSQL)</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?i)^\s*(create)\s+(or\s+replace\s+)?(function|view)\s+((?:(?:[\w]+|".+")\.)?(?:[\w]+|".+"))</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.pgsql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.pgsql</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.other.pgsql</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.pgsql</string>
				</dict>
			</dict>
			<key>end</key>
			<string>;\s*</string>
			<key>name</key>
			<string>meta.statement.pgsql.create</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#dollar_quotes</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#strings</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#misc</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?i:^\s*(create)\s+(aggregate|collation|conversion|database|domain|event trigger|group|(?:unique\s+)?index|language|operator class|operator|rule|schema|sequence|(?:global\s+|local\s+)?(?:temp\s+|temporary\s+|unlogged\s+)?table|tablespace|trigger|type|user|(?:materialized\s+)?view)\s+)(if\s+not\s+exists\s+)?((?:(?:[\w]+|".+")\.)?(?:[\w]+|".+"))</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.create.pgsql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.pgsql</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.other.pgsql</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.pgsql</string>
				</dict>
			</dict>
			<key>end</key>
			<string>;\s*</string>
			<key>name</key>
			<string>meta.statement.pgsql.create</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#dollar_quotes</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#strings</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#misc</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(^[a-zA-Z]+)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.other.pgsql</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Last update (including keywords below) using postgres 9.3. See classes/Help.php for update method. Testing change below to just assume starting word is a SQL keyword.</string>
			<key>end</key>
			<string>;\s*</string>
			<key>name</key>
			<string>meta.statement.pgsql</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#dollar_quotes</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#strings</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#misc</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^(\\[\S]+)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.pgsql</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>psql directives</string>
			<key>end</key>
			<string>\n</string>
			<key>name</key>
			<string>meta.statement.pgsql.psql</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.pgsql</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(--).*$\n?</string>
					<key>name</key>
					<string>comment.line.double-dash.pgsql</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.pgsql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.c</string>
				</dict>
			</array>
		</dict>
		<key>dollar_quotes</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\$[\w_0-9]*\$)$</string>
					<key>comment</key>
					<string>Assume multiline dollar quote is SQL; start if quote is at the end of the line.
		                This could easily support other PL languages like PHP and Ruby -- see PHP heredoc as an example.</string>
					<key>end</key>
					<string>\1</string>
					<key>name</key>
					<string>meta.dollar-quote.pgsql</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#dollar_quotes</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#strings</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#keywords</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#misc</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.pgsql</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?xi)\b(abort|absolute|access|action|add|admin|after|aggregate|all|also|alter|always|analyse|analyze|and|any|array|as|asc|assertion|assignment|asymmetric|at|attribute|authorization|backward|before|begin|between|bigint|binary|bit|boolean|both|by|cache|called|cascade|cascaded|case|cast|catalog|chain|char|character|characteristics|check|checkpoint|class|close|cluster|coalesce|collate|collation|column|comment|comments|commit|committed|concurrently|configuration|connection|constraint|constraints|content|continue|conversion|copy|cost|create|cross|csv|current|current_catalog|current_date|current_role|current_schema|current_time|current_timestamp|current_user|cursor|cycle|data|database|day|deallocate|dec|decimal|declare|default|defaults|deferrable|deferred|definer|delete|delimiter|delimiters|desc|dictionary|disable|discard|distinct|do|document|domain|double|drop|each|else|enable|encoding|encrypted|end|enum|escape|event|except|exclude|excluding|exclusive|execute|exists|explain|extension|external|extract|false|family|fetch|first|float|following|for|force|foreign|forward|freeze|from|full|function|functions|global|grant|granted|greatest|group|handler|having|header|hold|hour|identity|if|ilike|immediate|immutable|implicit|in|including|increment|index|indexes|inherit|inherits|initially|inline|inner|inout|input|insensitive|insert|instead|int|integer|intersect|interval|into|invoker|is|isnull|isolation|join|key|label|language|large|last|lateral|lc_collate|lc_ctype|leading|leakproof|least|left|level|like|limit|listen|load|local|localtime|localtimestamp|location|lock|mapping|match|materialized|maxvalue|minute|minvalue|mode|month|move|name|names|national|natural|nchar|next|no|none|not|nothing|notify|notnull|nowait|null|nullif|nulls|numeric|object|of|off|offset|oids|on|only|operator|option|options|or|order|out|outer|over|overlaps|overlay|owned|owner|parser|partial|partition|passing|password|placing|plans|position|preceding|precision|prepare|prepared|preserve|primary|prior|privileges|procedural|procedure|program|quote|range|read|real|reassign|recheck|recursive|ref|references|refresh|reindex|relative|release|rename|repeatable|replace|replica|reset|restart|restrict|returning|returns|revoke|right|role|rollback|row|rows|rule|savepoint|schema|scroll|search|second|security|select|sequence|sequences|serializable|server|session|session_user|set|setof|share|show|similar|simple|smallint|snapshot|some|stable|standalone|start|statement|statistics|stdin|stdout|storage|strict|strip|substring|symmetric|sysid|system|table|tables|tablespace|temp|template|temporary|text|then|time|timestamp|to|trailing|transaction|treat|trigger|trim|true|truncate|trusted|type|types|unbounded|uncommitted|unencrypted|union|unique|unknown|unlisten|unlogged|until|update|user|using|vacuum|valid|validate|validator|value|values|varchar|variadic|varying|verbose|version|view|volatile|when|where|whitespace|window|with|without|work|wrapper|write|xml|xmlattributes|xmlconcat|xmlelement|xmlexists|xmlforest|xmlparse|xmlpi|xmlroot|xmlserialize|year|yes|zone)\b</string>
				</dict>
			</array>
		</dict>
		<key>misc</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b\d+\b</string>
					<key>name</key>
					<string>constant.numeric.pgsql</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\*</string>
					<key>name</key>
					<string>keyword.operator.star.pgsql</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[!&lt;&gt;]?=|&lt;&gt;|&lt;|&gt;</string>
					<key>name</key>
					<string>keyword.operator.comparison.pgsql</string>
				</dict>
				<dict>
					<key>match</key>
					<string>-|\+|/</string>
					<key>name</key>
					<string>keyword.operator.math.pgsql</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\|\|</string>
					<key>name</key>
					<string>keyword.operator.concatenator.pgsql</string>
				</dict>
			</array>
		</dict>
		<key>string_escape</key>
		<dict>
			<key>match</key>
			<string>\\.</string>
			<key>name</key>
			<string>constant.character.escape.pgsql</string>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.pgsql</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.pgsql</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>This is faster than the next begin/end rule since sub-pattern will match till end-of-line and SQL files tend to have very long lines.</string>
					<key>match</key>
					<string>(')[^'\\]*(')</string>
					<key>name</key>
					<string>string.quoted.single.pgsql</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.pgsql</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Need to implement escape rule with two single quotes in a row. Lots of other escaping issues with single quotes.</string>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.pgsql</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.pgsql</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escape</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>Double quoting treated like strings, but they are really identifiers.</string>
					<key>match</key>
					<string>(")[^"#]*(")</string>
					<key>name</key>
					<string>variable.other.pgsql</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\$[\w_0-9]*\$)</string>
					<key>comment</key>
					<string>Color as a string if dollar quote did not start at the end of a line.</string>
					<key>end</key>
					<string>\1</string>
					<key>name</key>
					<string>string.unquoted.dollar.pgsql</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.pgsql</string>
	<key>uuid</key>
	<string>4D6B679D-111C-4529-B558-3F25487D9E27</string>
</dict>
</plist>